import csv

 
def txt_lower_check(txt_role):
    return(txt_role.lower())

def isNotEmpty(s):
    #print(bool(s and s.strip()))
    return bool(s and s.strip())

#def txt_token_split(pd):

def txt_feature_lib_chk(role_inp):
    role = role_inp.lower()
    role_classified = "DNA"
    role_dict = {
        # Enter your role dictionary here                                  
        }
    if isNotEmpty(role):
        #print(len(role_dict))
        for role_cat in role_dict:
            for role_sub in role_dict[role_cat]:
                #print role_sub
                if  role.find(role_sub.lower()) == -1:
                    continue
                else:
                    role_classified = role_cat
                    print( role_inp + " classification is " + role_classified)
                    return(role_classified)
                    
    #print( role_inp + " classification is " + role_classified)
    return(role_classified)
   
  
  
  
def main():

 Role_file = open("Roles.csv",'r')
 Role_read = csv.reader(Role_file, delimiter=',')
 Analysis_out = open("Roleout.txt",'w')

 
 for role_row in Role_read:
    if len(role_row)!=0:
      #print role_row
      for role_txt in role_row:
      #role_txt_l= txt_lower_check(role_txt)
          Role_Class = txt_feature_lib_chk(role_txt)
          Analysis_out.write(str(role_txt) + '\t')
          Analysis_out.write(str(Role_Class))
          Analysis_out.write("\n")
    else:
      Role_Class = "BLANK"
      Analysis_out.write("EMPTY_CELL" + '\t')
      Analysis_out.write(str(Role_Class))
      Analysis_out.write("\n")

 #print("in main post call")

main()
 
